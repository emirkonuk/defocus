# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_generators.ipynb (unless otherwise specified).

__all__ = ['ResBlock', 'ResNet', 'UpConv2D', 'MSResNetGenerator']

# Cell
import torch.nn as nn
from functools import partial

# Cell
class ResBlock(nn.Module):
    def __init__(self, n_feats, kernel_size):
        super(ResBlock, self).__init__()

        self.conv1 = nn.Conv2d(n_feats, n_feats, kernel_size, padding=(kernel_size // 2))
        self.activation = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(n_feats, n_feats, kernel_size, padding=(kernel_size // 2))

    def forward(self, input_):
        residual = self.conv1(input_)
        residual = self.activation(residual)
        residual = self.conv2(residual)
        output = input_ + residual

        return output

# Cell
class ResNet(nn.Module):
    def __init__(self, in_channels, out_channels, n_feats=64, kernel_size=5, n_resblocks=19):
        super(ResNet, self).__init__()

        self.input_layer = nn.Conv2d(in_channels, n_feats, kernel_size, padding=(kernel_size // 2))
        self.blocks = nn.ModuleList([])
        for _ in range(n_resblocks):
            self.blocks.append(ResBlock(n_feats, kernel_size))
        self.output_layer = nn.Conv2d(n_feats, out_channels, kernel_size, padding=(kernel_size // 2))

    def forward(self, input_):
        x = self.input_layer(input_)
        for block in self.blocks:
            x = block(x)
        output = self.output_layer(x)
        return output

# Cell
class UpConv2D(nn.Module):
    def __init__(self, in_channels=3, out_channels=3, kernel_size=5, ratio=2):
        super(UpConv2D, self).__init__()

        self.conv = nn.Conv2d(in_channels, out_channels*(ratio**2), kernel_size, padding=(kernel_size // 2))
        self.upscale = nn.PixelShuffle(ratio)

    def forward(self, input_):
        x = self.conv(input_)
        output = self.upscale(x)
        return output

# Cell
class MSResNetGenerator(nn.Module):
    def __init__(self, n_scales = 3, n_feats=64, kernel_size=5, n_resblocks=19):
        super(MSResNetGenerator, self).__init__()

        # Seungjun does not scale the images down to [-1,1] but rather uses [-127.5, 127.5]
        # this self.mean variable will be used for that. wonder why he calls it the "mean"?
        self.mean = 255.0 / 2
        self.n_scales = n_scales

        coarsest_level = ResNet(in_channels=3,
                                out_channels=3,
                                n_feats=n_feats,
                                kernel_size=kernel_size,
                                n_resblocks=n_resblocks)
        finer_levels = [ResNet(in_channels=6,
                               out_channels=3,
                               n_feats=n_feats,
                               kernel_size=kernel_size,
                               n_resblocks=n_resblocks) for _ in range(n_scales-1)]

        self.scale_networks = nn.ModuleList([])
        self.scale_networks.append(coarsest_level)
        self.scale_networks.extend(finer_levels)

        # note that the original implementation always uses 5x5 kernels (default) for upsampling
        self.upconv_blocks = nn.ModuleList([UpConv2D() for _ in range(n_scales-1)])

    def forward(self, input_pyramid):

        output_pyramid = [None]*self.n_scales
        for scale in range(self.n_scales):
            if scale == 0:
                input_ = input_pyramid[scale] - self.mean
            else:
                upconvolved_from_previous = self.upconv_blocks[scale-1](output_pyramid[scale-1])
                input_ = torch.cat((input_pyramid[scale] - self.mean, upconvolved_from_previous) ,1)

            output_pyramid[scale] = self.scale_networks[scale](input_)

        return output_pyramid