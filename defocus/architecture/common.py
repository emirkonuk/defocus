# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_architecture_common.ipynb (unless otherwise specified).

__all__ = ['ResBlock', 'ResNet', 'UpConv2D']

# Cell
import torch.nn as nn
class ResBlock(nn.Module):
    def __init__(self, n_feats, kernel_size):
        super(ResBlock, self).__init__()

        self.conv1 = nn.Conv2d(n_feats, n_feats, kernel_size, padding=(kernel_size // 2))
        self.activation = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(n_feats, n_feats, kernel_size, padding=(kernel_size // 2))

    def forward(self, input_):
        residual = self.conv1(input_)
        residual = self.activation(residual)
        residual = self.conv2(residual)
        output = input_ + residual

        return output

class ResNet(nn.Module):
    def __init__(self, in_channels, out_channels, n_feats=64, kernel_size=5, n_resblocks=19):
        super(ResNet, self).__init__()

        self.input_layer = nn.Conv2d(in_channels, n_feats, kernel_size, padding=(kernel_size // 2))
        self.blocks = nn.ModuleList([])
        for _ in range(n_resblocks):
            self.blocks.append(ResBlock(n_feats, kernel_size))
        self.output_layer = nn.Conv2d(n_feats, out_channels, kernel_size, padding=(kernel_size // 2))

    def forward(self, input_):
        x = self.input_layer(input_)
        for block in self.blocks:
            x = block(x)
        output = self.output_layer(x)
        return output


class UpConv2D(nn.Module):
    def __init__(self, in_channels=3, out_channels=3, kernel_size=5, ratio=2):
        super(UpConv2D, self).__init__()

        self.conv = nn.Conv2d(in_channels, out_channels*(ratio**2), kernel_size, padding=(kernel_size // 2))
        self.upscale = nn.PixelShuffle(ratio)

    def forward(self, input_):
        x = self.conv(input_)
        output = self.upscale(x)
        return output