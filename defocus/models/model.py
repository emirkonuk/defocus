# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_model.ipynb (unless otherwise specified).

__all__ = ['Model']

# Cell
import torch
import torch.nn as nn
import defocus.models.generators as generators
import defocus.models.discriminators as discriminators

# Cell
class Model(nn.Module):
    def __init__(self, generator_name, discriminator_name):
        super(Model, self).__init__()
        self.G = self._get_model(generator_name)
        self.D = self._get_model(discriminator_name)
        self.optimizer = None

    def _get_model(self, model_name):
        if 'Generator' in model_name:
            return getattr(generators, model_name)()
        if 'Discriminator' in model_name:
            return getattr(discriminators, model_name)()


    def parallelize(self, device_ids, output_device):
        self.G = nn.parallel.DistributedDataParallel(self.G, device_ids=device_ids, output_device=output_device)
        if self.D is not None:
            self.D = nn.parallel.DistributedDataParallel(self.D, device_ids=device_ids, output_device=output_device)

    def save(self, model_path):
        torch.save({'G':self.G.state_dict(),
                    'D':self.D.state_dict(),
                    'optimizer': self.optimizer.state_dict()},
                   model_path)

    def load(self, model_path, isStrict=False):
        checkpoint = torch.load(model_path)
        self.G.load_state_dict(checkpoint['G'], strict=isStrict)
        self.D.load_state_dict(checkpoint['D'], strict=isStrict)
        self.optimizer.load_state_dict(checkpoint['optimizer'], strict=isStrict)